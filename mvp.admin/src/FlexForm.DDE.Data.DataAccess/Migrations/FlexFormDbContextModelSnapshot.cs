// <auto-generated />
using System;
using FlexForm.DDE.Data.DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlexForm.DDE.Data.DataAccess.Migrations
{
    [DbContext(typeof(FlexFormDbContext))]
    partial class FlexFormDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditLogType");

                    b.Property<DateTime>("EventDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogType");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.Constraints.AuditLogTypeConstraint", b =>
                {
                    b.Property<int>("AuditLogType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AuditLogType");

                    b.ToTable("AuditLogTypeConstraint","enum");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.Constraints.DisplayTypeConstraint", b =>
                {
                    b.Property<int>("DisplayType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("DisplayType");

                    b.ToTable("DisplayTypeConstraint","enum");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.Constraints.FieldTypeConstraint", b =>
                {
                    b.Property<int>("FieldType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("FieldType");

                    b.ToTable("FieldTypeConstraint","enum");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.Constraints.FormTypeConstraint", b =>
                {
                    b.Property<int>("FormType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("FormType");

                    b.ToTable("FormTypeConstraint","enum");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityCollectionMember", b =>
                {
                    b.Property<int>("FieldValueId");

                    b.Property<int>("EntityInstanceId");

                    b.HasKey("FieldValueId", "EntityInstanceId");

                    b.HasIndex("EntityInstanceId");

                    b.ToTable("EntityCollectionMember");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EntityDefinition");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityDefinitionId");

                    b.Property<bool>("IsValid");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EntityDefinitionId");

                    b.ToTable("EntityInstance");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityInstanceArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditLogId");

                    b.Property<int>("EntityInstanceId");

                    b.Property<int>("FormDefinitionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("EntityInstanceId");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("EntityInstanceArchive");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityDefinitionId");

                    b.Property<string>("Expression");

                    b.Property<int>("FieldType");

                    b.Property<int?>("ItemSourceDefinitionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EntityDefinitionId");

                    b.HasIndex("FieldType");

                    b.HasIndex("ItemSourceDefinitionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FieldDefinition");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BoolValue");

                    b.Property<DateTime?>("DateTimeValue");

                    b.Property<decimal?>("DecimalValue");

                    b.Property<double?>("DoubleValue");

                    b.Property<int>("EntityInstanceId");

                    b.Property<int?>("EntityReferenceValue");

                    b.Property<int>("FieldDefinitionId");

                    b.Property<int?>("IntValue");

                    b.Property<string>("OuterIdValue")
                        .HasMaxLength(128);

                    b.Property<string>("StringValue");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EntityInstanceId");

                    b.HasIndex("EntityReferenceValue");

                    b.HasIndex("FieldDefinitionId");

                    b.ToTable("FieldValue");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FieldValueArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTimeValue");

                    b.Property<decimal?>("DecimalValue");

                    b.Property<double?>("DoubleValue");

                    b.Property<int>("EntityInstanceArchiveId");

                    b.Property<int?>("EntityReferenceValue");

                    b.Property<int>("FieldValueId");

                    b.Property<int?>("IntValue");

                    b.Property<string>("OuterIdValue");

                    b.Property<string>("StringValue");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EntityInstanceArchiveId");

                    b.HasIndex("FieldValueId");

                    b.ToTable("FieldValueArchive");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContainerFormDefinitionId");

                    b.Property<int>("DisplayType");

                    b.Property<int>("FormDefinitionId");

                    b.Property<int?>("ItemSourceDefinitionId");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UiPropertiesText")
                        .HasColumnName("UiProperties");

                    b.HasKey("Id");

                    b.HasIndex("ContainerFormDefinitionId");

                    b.HasIndex("DisplayType");

                    b.HasIndex("FormDefinitionId");

                    b.HasIndex("ItemSourceDefinitionId");

                    b.ToTable("FormControl");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormControlBinding", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("FieldDefinitionId");

                    b.Property<bool>("IsInvalidStateEnabled");

                    b.Property<bool>("IsReadOnly");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UiPropertiesText")
                        .HasColumnName("UiProperties");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.ToTable("FormControlBinding");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("EntityDefinitionId");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("FormType");

                    b.Property<bool>("IsInvalidStateEnabled");

                    b.Property<bool>("IsRootForm");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("UiPropertiesText")
                        .HasColumnName("UiProperties");

                    b.HasKey("Id");

                    b.HasIndex("EntityDefinitionId");

                    b.HasIndex("FormName")
                        .IsUnique();

                    b.HasIndex("FormType");

                    b.ToTable("FormDefinition");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormPermission", b =>
                {
                    b.Property<int>("FormDefinitionId");

                    b.Property<Guid>("UserGroupId");

                    b.HasKey("FormDefinitionId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("FormPermission");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ItemSourceDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IncludeProperties");

                    b.Property<bool>("IsSingleResult");

                    b.Property<string>("ItemSourceCondition");

                    b.Property<string>("ItemSourceDefaultOrder");

                    b.Property<int>("ItemSourceEntityDefinitionId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int>("PageSize");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ItemSourceEntityDefinitionId");

                    b.ToTable("ItemSourceDefinition");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.UserGroupMember", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Parameter");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ValidationErrorMessage");

                    b.Property<string>("ValidationMethod")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("ValidationRule");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRuleFieldDefinition", b =>
                {
                    b.Property<int>("ValidationRuleId");

                    b.Property<int>("FieldDefinitionId");

                    b.HasKey("ValidationRuleId", "FieldDefinitionId");

                    b.HasIndex("FieldDefinitionId");

                    b.ToTable("ValidationRuleFieldDefinition");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRuleFormControlBinding", b =>
                {
                    b.Property<int>("ValidationRuleId");

                    b.Property<int>("FormControlBindingId");

                    b.HasKey("ValidationRuleId", "FormControlBindingId");

                    b.HasIndex("FormControlBindingId");

                    b.ToTable("ValidationRuleFormControlBinding");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRuleFormDefinition", b =>
                {
                    b.Property<int>("ValidationRuleId");

                    b.Property<int>("FormDefinitionId");

                    b.HasKey("ValidationRuleId", "FormDefinitionId");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("ValidationRuleFormDefinition");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.AuditLog", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.Constraints.AuditLogTypeConstraint", "AuditLogTypeConstraint")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AuditLogType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexForm.DDE.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityCollectionMember", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityInstance", "EntityInstance")
                        .WithMany("EntityCollectionMembers")
                        .HasForeignKey("EntityInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.FieldValue", "FieldValue")
                        .WithMany("EntityCollectionMembers")
                        .HasForeignKey("FieldValueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityInstance", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityDefinition", "EntityDefinition")
                        .WithMany("EntityInstances")
                        .HasForeignKey("EntityDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.EntityInstanceArchive", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.AuditLog", "AuditLog")
                        .WithMany("EntityInstanceArchives")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.EntityInstance", "EntityInstance")
                        .WithMany("EntityInstanceArchives")
                        .HasForeignKey("EntityInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.FormDefinition", "FormDefintion")
                        .WithMany("EntityInstanceArchives")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FieldDefinition", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityDefinition", "EntityDefinition")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("EntityDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.Constraints.FieldTypeConstraint", "FieldTypeConstraint")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("FieldType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexForm.DDE.Data.Entity.ItemSourceDefinition", "ItemSourceDefinition")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("ItemSourceDefinitionId");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FieldValue", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityInstance", "EntityInstance")
                        .WithMany("FieldValues")
                        .HasForeignKey("EntityInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexForm.DDE.Data.Entity.EntityInstance", "ReferencedEntity")
                        .WithMany("EntityReferenceFieldValues")
                        .HasForeignKey("EntityReferenceValue");

                    b.HasOne("FlexForm.DDE.Data.Entity.FieldDefinition", "FieldDefinition")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FieldValueArchive", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityInstanceArchive", "EntityInstanceArchive")
                        .WithMany("FieldValueArchives")
                        .HasForeignKey("EntityInstanceArchiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.FieldValue", "FieldValue")
                        .WithMany("FieldValueArchives")
                        .HasForeignKey("FieldValueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormControl", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.FormDefinition", "ContainerFormDefinition")
                        .WithMany()
                        .HasForeignKey("ContainerFormDefinitionId");

                    b.HasOne("FlexForm.DDE.Data.Entity.Constraints.DisplayTypeConstraint", "DisplayTypeConstraint")
                        .WithMany("FormControls")
                        .HasForeignKey("DisplayType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexForm.DDE.Data.Entity.FormDefinition", "FormDefinition")
                        .WithMany("FormControls")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlexForm.DDE.Data.Entity.ItemSourceDefinition", "ItemSourceDefinition")
                        .WithMany("FormControls")
                        .HasForeignKey("ItemSourceDefinitionId");
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormControlBinding", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.FieldDefinition", "FieldDefinition")
                        .WithMany("FormControlBindings")
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.FormControl", "FormControl")
                        .WithOne("FormControlBinding")
                        .HasForeignKey("FlexForm.DDE.Data.Entity.FormControlBinding", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormDefinition", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityDefinition", "EntityDefinition")
                        .WithMany("FormDefinitions")
                        .HasForeignKey("EntityDefinitionId");

                    b.HasOne("FlexForm.DDE.Data.Entity.Constraints.FormTypeConstraint", "FormTypeConstraint")
                        .WithMany("FormDefinitions")
                        .HasForeignKey("FormType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.FormPermission", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.FormDefinition", "FormDefinition")
                        .WithMany("FormPermissions")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.UserGroup", "UserGroup")
                        .WithMany("FormPermissions")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ItemSourceDefinition", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.EntityDefinition", "ItemSourceEntityDefinition")
                        .WithMany("ItemSourceDefinitions")
                        .HasForeignKey("ItemSourceEntityDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.UserGroupMember", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.UserGroup", "UserGroup")
                        .WithMany("UserGroupMembers")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.User", "User")
                        .WithMany("UserGroupMember")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRuleFieldDefinition", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.FieldDefinition", "FieldDefinition")
                        .WithMany("ValidationRuleFieldDefinitions")
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.ValidationRule", "ValidationRule")
                        .WithMany("ValidationRuleFieldDefinitions")
                        .HasForeignKey("ValidationRuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRuleFormControlBinding", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.FormControlBinding", "FormControlBinding")
                        .WithMany("ValidationRuleFormControlBindings")
                        .HasForeignKey("FormControlBindingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.ValidationRule", "ValidationRule")
                        .WithMany("ValidationRuleFormControlBindings")
                        .HasForeignKey("ValidationRuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlexForm.DDE.Data.Entity.ValidationRuleFormDefinition", b =>
                {
                    b.HasOne("FlexForm.DDE.Data.Entity.FormDefinition", "FormDefinition")
                        .WithMany("ValidationRuleFormDefinitions")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlexForm.DDE.Data.Entity.ValidationRule", "ValidationRule")
                        .WithMany("ValidationRuleFormDefinitions")
                        .HasForeignKey("ValidationRuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
